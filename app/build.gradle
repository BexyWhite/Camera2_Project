// app config
apply plugin: 'com.android.application'

def AOSP = false
def USE_API2 = false

// those configs based on AOSP
def USE_FILMSTRIP =         AOSP ? true : false
def FORCE_PORTRAIT_SCREEN = AOSP ? false : true

android {
    def camera_folder = 'Camera2'
    def compileSdkVersionInt = 25
    compileSdkVersion compileSdkVersionInt
    buildToolsVersion "25.0.3"

    defaultConfig {
        applicationId "com.baby518.camera2"
        minSdkVersion 23
        targetSdkVersion 25
        versionCode getCurrentDate() as int
        versionName "1.0.3." + getCurrentDate()

        buildConfigField("boolean", "USE_API2", "${USE_API2}")
        buildConfigField("boolean", "USE_FILMSTRIP", "${USE_FILMSTRIP}")
        buildConfigField("boolean", "FORCE_PORTRAIT_SCREEN", "${FORCE_PORTRAIT_SCREEN}")
        manifestPlaceholders = [SCREEN_ORIENTATION: FORCE_PORTRAIT_SCREEN ? 'portrait' : 'unspecified']
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    if (compileSdkVersionInt >= 23) {
        useLibrary 'org.apache.http.legacy'
    }

    sourceSets {
        main {
            if (!AOSP) {
                manifest.srcFile file(camera_folder + '/src_plus/AndroidManifest.xml')
            } else {
                manifest.srcFile file(camera_folder + '/AndroidManifest.xml')
            }
            def srcFolder = [
                    camera_folder + '/src',
                    camera_folder + '/src_pd',
                    camera_folder + '/src_pd_gcam',
                    camera_folder + '/config/src',
            ]

            if (!AOSP) {
                srcFolder = srcFolder + [camera_folder + '/src_plus']
            }

            def resFolder = [
                    camera_folder + '/res',
                    camera_folder + '/res_p',
            ]

            if (!AOSP) {
                resFolder = resFolder + [camera_folder + '/res_plus']
            }

            def assetsFolder = [camera_folder + '/assets']
            def libsFolder = [camera_folder + '/libs']

            java.srcDirs = srcFolder
            resources.srcDirs = srcFolder
            aidl.srcDirs = srcFolder
            renderscript.srcDirs = srcFolder
            res.srcDirs = resFolder
            assets.srcDirs = assetsFolder
//            jni.srcDirs = ['jni']
            jniLibs.srcDirs = libsFolder
        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
}

dependencies {
    provided files(getLayoutLibPath(android))
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':framework_ex')
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    compile 'com.google.guava:guava:19.0'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.adobe.xmp:xmpcore:5.1.2'
}

def static getCurrentDate() {
    def now = new Date().format('yyyyMMddHH');
    return now;
}

// must called after "android" definition
def static getLayoutLibPath(Object android) {
    def rootDir;
    rootDir = "${android.getSdkDirectory().getAbsolutePath()}" + "/platforms/" + android.compileSdkVersion + "/data/layoutlib.jar"
    Console.println(rootDir)
    return rootDir
}
